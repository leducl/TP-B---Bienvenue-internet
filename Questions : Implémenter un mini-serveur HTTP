2.1 Serveur minimal - “Hello World”

1. Est-ce que votre client (navigateur, curl, telnet…) reçoit bien une réponse ? Quel contenu voyez-vous à l’écran ?
→ Oui, le client reçoit une réponse. À l’écran, on voit le texte "Hello World!" qui s’affiche.

2. Quelle est la structure exacte du message que vous renvoyez (statut, entêtes, ligne vide, corps) ?
→ D’abord on a la ligne de statut : HTTP/1.1 200 OK.
Ensuite les entêtes : Content-Type: text/plain, Content-Length: 12, Connection: close.
Puis une ligne vide pour dire "les entêtes sont finis".
Enfin le corps contient : Hello World!.

3. Que se passe-t-il si vous changez Content-Length: 12 en une autre valeur ?
→ Si on met une valeur plus petite, le client n’affiche qu’une partie du texte.
Si on met une valeur plus grande, le client peut attendre plus de données qui n’arrivent jamais.

4. Que se passe-t-il si vous omettez complètement cette ligne ?
→ Certains clients arrivent à afficher le texte (parfois en mode "chunked" ou lecture jusqu’à la fermeture de la connexion).
D’autres peuvent bloquer ou ne pas afficher car ils ne savent pas combien de données lire.

5. Que se passe-t-il si vous supprimez la ligne vide entre les entêtes et le message ? Le navigateur ou le client affiche-t-il encore quelque chose ?
→ Le client ne sait pas où commencent les données. Souvent, rien ne s’affiche ou un message d’erreur s’affiche. La ligne vide est obligatoire.

6. Le message s’affiche-t-il dans telnet ? Et dans curl ? Et dans un navigateur ? Pourquoi certains outils sont-ils plus stricts que d’autres ?
→ Dans telnet, on voit tout car telnet affiche les données brutes sans rien vérifier.
Dans curl, ça dépend : il est assez souple mais peut signaler des erreurs.
Le navigateur est le plus strict, il respecte bien le protocole HTTP et peut refuser d’afficher s’il manque des parties.

2.2 Serveur avec analyse du chemin

Quelle est la structure de la ligne de requête HTTP reçue côté serveur ? Quels sont les trois éléments que vous devez extraire ?
→ La ligne a trois parties : méthode (ex : GET), chemin (ex : /motd), version (ex : HTTP/1.1).

Que se passe-t-il si la ligne est mal formée (vide ou incomplète) ? Comment éviter une erreur dans votre code ?
→ Erreur de type ValueError. Il faut utiliser un try/except ou vérifier le nombre d’éléments.

Que contient exactement la variable chemin ? Est-ce toujours ce que l’utilisateur a tapé dans l’URL ?
→ Elle contient le chemin demandé (ex : /motd). Oui, c’est ce que l’utilisateur tape après le domaine.

Que fait votre serveur si la méthode reçue est autre que GET ?
→ Il ignore ou peut renvoyer une erreur 405 Method Not Allowed.

Que se passe-t-il si le chemin n’est pas reconnu ? Quel message retournez-vous ? Est-il lisible ?
→ Le serveur renvoie 404 Not Found. Par défaut, c’est lisible mais peut être amélioré.

Le message 404 Not Found est-il suffisant ? Pourriez-vous y ajouter un texte plus explicite ?
→ Oui, mais un message HTML plus clair serait mieux (ex : <h1>Page introuvable</h1>).

Est-ce que les chemins /motd, /motd/, et /motd?x=42 sont identiques ? Comment les différencier ou les normaliser ?
→ Non, ils sont différents. On peut les normaliser avec urlparse ou supprimer les / finaux.

Pour ajouter un chemin comme /bonjour, que faut-il modifier ? Est-ce facilement extensible ?
→ Ajouter une condition if. Peu extensible, une structure type dictionnaire serait mieux.

Que pourrait-il se passer si un utilisateur tape une URL comme /../../etc/passwd ? Pourquoi est-ce dangereux ?
→ Cela peut donner accès à des fichiers système (attaque path traversal). C’est une faille grave.

Traitez-vous le chemin comme une chaîne ou une ressource contrôlée ? Quelles protections ajouter ?
→ Actuellement comme une chaîne. Il faut valider le chemin et empêcher les accès non autorisés.

2.3 Serveur dynamique, avec /date

Quelle est la ligne exacte reçue par le serveur quand un client appelle /date ? Comment repérez-vous ce chemin ?
→ La ligne reçue est typiquement : GET /date HTTP/1.1.
Le chemin est repéré en découpant la ligne avec split() : methode, chemin, version = ligne.split().

Comment déterminez-vous que la requête est terminée ? Quelle est l’utilité de la ligne vide à la fin de la requête ?
→ La requête se termine quand une ligne vide (\r\n ou juste \n) est lue.
Cette ligne vide marque la fin des en-têtes dans le protocole HTTP.

Que contient la réponse retournée par votre serveur ? Est-ce que la date change à chaque appel ?
→ La réponse contient une date et une heure au moment de la requête. Oui, elle change à chaque appel car elle est générée dynamiquement.

Quel champ d’en-tête est indispensable pour que la réponse soit bien comprise par le client ? Que se passe-t-il si vous oubliez Content-Length ?
→ Content-Length est indispensable. Sans lui, certains clients (navigateurs, curl) n'affichent rien ou restent bloqués.

Que se passe-t-il si Content-Length est incorrect (trop petit ou trop grand) ? Testez avec curl, telnet, et un navigateur.
→ Si la taille est trop petite : le message est tronqué.
Si elle est trop grande : le client attend inutilement plus de données (peut "planter").

Le corps de votre réponse contient-il des caractères spéciaux ou des retours à la ligne (\n) ? Comment sont-ils affichés selon le client utilisé ?
→ Oui, \n peut apparaître.
Dans telnet ou curl, il s'affiche tel quel.
Dans un navigateur, il faut du HTML (<br> ou <p>) pour bien l’afficher.

Que renvoie votre serveur si un autre chemin est demandé, par exemple /time ou /now ? Est-ce prévu ? Que se passe-t-il ?
→ Si non prévu, le serveur renvoie une erreur 404 avec un message par défaut ou personnalisé.

Est-ce que le serveur répond de manière fiable même si deux clients se connectent successivement ? Et en même temps ?
→ Successivement : oui.
En même temps : non, sauf si le serveur est multithreadé ou asynchrone.
Avec socketserver.ThreadingMixIn, cela devient possible.

Pourriez-vous ajouter un autre chemin dynamique (comme /uptime) ? Quelles informations pourraient être utiles à afficher ?
→ Oui. Par exemple, /uptime pourrait afficher le temps écoulé depuis le lancement du serveur.

Que faudrait-il faire pour rendre ce serveur un peu plus “propre” ou modulaire ? Est-ce que le code pourrait être réorganisé pour gérer plusieurs routes dynamiques plus facilement ?
→ Oui. On peut créer une fonction par chemin, et utiliser un dictionnaire comme :
routes = {
    "/date": fonction_date,
    "/uptime": fonction_uptime,
}

